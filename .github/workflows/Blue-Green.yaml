name: Blue-Green Deployment

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: |
        docker build -t blue-green:${{ github.sha }} .
        docker tag blue-green:${{ github.sha }} imishrarohit/blue-green:latest

    - name: Push Docker Image
      run: |
        docker push imishrarohit/blue-green:latest

    - name: Increment Version
      id: versioning
      run: |
        if [ ! -f VERSION ]; then
        echo "VERSION file not found. Initializing with version 1."
        echo "1" > VERSION
        fi
        echo "Previous version: $(cat VERSION)"
        new_version=$(($(cat VERSION) + 1))
        echo "${new_version}" > VERSION
        echo "New version: ${new_version}"
        echo "VERSION=${new_version}" >> $GITHUB_ENV

    # Step 4: Generate changelog
    - name: Generate Changelog
      run: |
        echo "Generating changelog for version ${{ env.VERSION }}"
        echo "## Changelog for version ${{ env.VERSION }}" > CHANGELOG.md
        
        
  deploy:
    name: Deploy to Green Environment
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: set up aws credentilas
      uses: Sumanshu-Nankana/setup-aws-cli@v1
      with:
          region: 'us-east-1'
          access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           
    - name: Install kubectl
      run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBECONFIG }}
    - run:
         kubectl apply -f deployment.yaml -n green
        
    - name: Deploy to Green Environment
      #uses: tale/kubectl-action@v1
      #with:
        #base64-kube-config: ${{ secrets.KUBECONFIG }}
      run: |
          aws eks update-kubeconfig --name blue-green-cluster --region us-east-1
          kubectl get nodes
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/blue-green -n green

  switch:
    name: Switch Traffic to blue
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      
    - name: set up aws credentilas
      uses: Sumanshu-Nankana/setup-aws-cli@v1
      with:
          region: 'us-east-1'
          access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
    - name: Validate Green Deployment
      run: |
        aws eks update-kubeconfig --name blue-green-cluster --region us-east-1     
        # Add custom health checks or validation here
        kubectl get pods --namespace=green

    - name: Health Check for Green
      id: healthcheck
      run: |
       RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://a612f295ab3be46a4a074aed3aef6f4d-1118818387.us-east-1.elb.amazonaws.com:3000/)
       if [ "$RESPONSE" -ne 200 ]; then
       echo "Health check failed. Rolling back."
       exit 1
       else
       echo "Health check passed."
       fi

    - name: Rollback to Blue
      if: failure()
      run: |
       aws eks update-kubeconfig --name blue-green-cluster --region us-east-1
       echo "Rolling back to Blue environment..."
       kubectl apply -f service-blue.yaml

    - name: Push Version and Changelog
      uses: ad-m/github-push-action@v0.6.0
      with:
        branch: master
        force: true
        commit_message: "Release version ${{ env.VERSION }} with changelog"
